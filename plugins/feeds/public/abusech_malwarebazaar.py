import logging
from datetime import timedelta

from core.errors import ObservableValidationError
from core.feed import Feed
from core.observables import Hash, File


class AbuseCHMalwareBazaaar(Feed):

    default_values = {
        "frequency": timedelta(hours=1),
        "name": "AbuseCHMalwareBazaaar",
        "source": "https://mb-api.abuse.ch/api/v1/",
        "description": "This feed contains md5/sha1/sha256",
    }

    def update(self):
        data = {"query": "get_recent", "selector": "time"}
        for _, block in self.update_json(method="post", data=data, filter_row='first_seen', key="data"):
            self.analyze(block)

    def analyze(self, block):  # pylint: disable=arguments-differ


        """
        {
            "sha256_hash": "7a094ad0ef65079505b37da09b647597143ea7fdfac8c838796cf294da3ff388",
            "sha1_hash": "6c823dad668aa14147b48487ccc0b79a477a4fce",
            "md5_hash": "b319c7702230a785be61331defc25120",
            "first_seen": "2020-03-17 12:58:49",
            "last_seen": null,
            "file_name": "a3aca2964e.sys",
            "file_size": 4755520,
            "file_type_mime": "application\/x-dosexec",
            "file_type": "sys",
            "reporter": "mxdh000",
            "anonymous": 0,
            "signature": null,
            "imphash": "9c3307eb75e37993d0067f7cc6f873a6",
            "ssdeep": "98304:BCPd6KWRbNKPVJFbZT4uX\/74m+7+LcDK3yaf:BCFPPF5D4bKYDji",
            "tags": [
                        "zyba-rootkit-2"
            ],
            "intelligence": {
                "clamav": null,
                "downloads": "4",
                "uploads": "1",
                "mail": null
            }
        }
        """


        context = {}

        context["date_added"] = block['first_seen']
        context["source"] = self.name
        context["filename"] = block["file_name"]
        context["md5"] = block["md5"]
        context["sha1"] = block["sha1"]
        context["sha256"] = block["sha256"]
        context["imphash"] = block["hash"]["imphash"]
        context["ssdeep"] = block["hash"]["ssdeep"]

        if not block.get('sha256_hash'):
            return
        malware_file = File.get_or_create(
            value='FILE:{}'.format(block["sha256_hash"]))

        malware_file.add_context(context)
        malware_file.tag(block["file_type_mime"])
        # md5, sha1, sha256
        for hash_type in ("md5_hash", "sha1_hash", "sha256_hash"):
            try:
                hash_data = Hash.get_or_create(value=block[hash_type])
                hash_data.add_context(context)
                hash_data.add_source(self.name)
                if block.get("tags"):
                    hash_data.tag(block["tags"])

                malware_file.active_link_to(
                    hash_data, hash_type.split("_")[0], self.name)
            except ObservableValidationError as e:
                logging.error(e)
