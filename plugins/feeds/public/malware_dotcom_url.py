import re
from datetime import datetime, timedelta
import logging

from core.observables import Url
from core.feed import Feed
from core.errors import ObservableValidationError


class MalwareDomainURL(Feed):

    default_values = {
        "frequency": timedelta(hours=1),
        "name": "MalwareDomainURL",
        "source": "http://www.malwaredomainlist.com/hostslist/mdl.xml",
        "description": "MalwareDomainList update. This feed shows the latest URL's which have been added to our list.",
    }

    def update(self):
        for dict in self.update_xml('item', ["title", "link", "description", "guid"]):
            self.analyze(dict)

    def analyze(self, dict):
        # Create the new URL and store it in the DB
        url = re.search(r"Host: (?P<url>[^,]+),", dict['description']).group('url')

        context = {}
        context['source'] = self.name
        context['description'] = re.search(r"Description: (?P<description>.*)$", dict['description']).group('description')
        context['guid'] = dict['guid']
        date_string = re.search(r"\((?P<date>.*)\)", dict['title']).group('date')
        context['date_added'] = datetime.strptime(date_string, "%Y/%m/%d_%H:%M")

        try:
            url = Url.get_or_create(value=url)
            url.add_context(context)
            url.add_source("feed")
            url.tag(['malware', 'crimeware'])
        except ObservableValidationError as e:
            logging.error(e)
